// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PdfRepository is an autogenerated mock type for the PdfRepository type
type PdfRepository struct {
	mock.Mock
}

// Compress provides a mock function with given fields: inputPath, outputPath
func (_m *PdfRepository) Compress(inputPath string, outputPath string) error {
	ret := _m.Called(inputPath, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for Compress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(inputPath, outputPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Merge provides a mock function with given fields: inputPaths, outputPath
func (_m *PdfRepository) Merge(inputPaths []string, outputPath string) error {
	ret := _m.Called(inputPaths, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for Merge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string) error); ok {
		r0 = rf(inputPaths, outputPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Split provides a mock function with given fields: inputPath, outputPath
func (_m *PdfRepository) Split(inputPath string, outputPath string) error {
	ret := _m.Called(inputPath, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for Split")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(inputPath, outputPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPdfRepository creates a new instance of PdfRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPdfRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PdfRepository {
	mock := &PdfRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
